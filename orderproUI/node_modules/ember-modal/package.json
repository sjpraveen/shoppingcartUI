{
  "_args": [
    [
      {
        "raw": "ember-modal@0.1.0",
        "scope": null,
        "escapedName": "ember-modal",
        "name": "ember-modal",
        "rawSpec": "0.1.0",
        "spec": "0.1.0",
        "type": "version"
      },
      "/home/praveen/angularWorkspace/orderproUI/node_modules/ui-bootstrap"
    ]
  ],
  "_from": "ember-modal@0.1.0",
  "_id": "ember-modal@0.1.0",
  "_inCache": true,
  "_location": "/ember-modal",
  "_npmUser": {
    "name": "jasonkriss",
    "email": "jasonkriss@gmail.com"
  },
  "_npmVersion": "1.3.24",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ember-modal@0.1.0",
    "scope": null,
    "escapedName": "ember-modal",
    "name": "ember-modal",
    "rawSpec": "0.1.0",
    "spec": "0.1.0",
    "type": "version"
  },
  "_requiredBy": [
    "/ui-bootstrap"
  ],
  "_resolved": "https://registry.npmjs.org/ember-modal/-/ember-modal-0.1.0.tgz",
  "_shasum": "f314f822b8359b3566c5d07a4bcdb95193767e62",
  "_shrinkwrap": null,
  "_spec": "ember-modal@0.1.0",
  "_where": "/home/praveen/angularWorkspace/orderproUI/node_modules/ui-bootstrap",
  "author": {
    "name": "Jason Kriss"
  },
  "dependencies": {},
  "deprecated": "This",
  "description": "Ember modal component addon",
  "devDependencies": {
    "broccoli-asset-rev": "^2.0.0",
    "broccoli-ember-hbs-template-compiler": "^1.6.1",
    "ember-cli": "0.1.5",
    "ember-cli-content-security-policy": "0.3.0",
    "ember-cli-dependency-checker": "0.0.7",
    "ember-cli-esnext": "0.1.1",
    "ember-cli-ic-ajax": "0.1.1",
    "ember-cli-inject-live-reload": "^1.3.0",
    "ember-cli-qunit": "0.1.2",
    "ember-data": "1.0.0-beta.12",
    "ember-export-application-global": "^1.0.0",
    "express": "^4.8.5",
    "glob": "^4.0.5"
  },
  "directories": {
    "doc": "doc",
    "test": "tests"
  },
  "dist": {
    "shasum": "f314f822b8359b3566c5d07a4bcdb95193767e62",
    "tarball": "https://registry.npmjs.org/ember-modal/-/ember-modal-0.1.0.tgz"
  },
  "ember-addon": {
    "configPath": "tests/dummy/config"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "keywords": [
    "ember-addon"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "jasonkriss",
      "email": "jasonkriss@gmail.com"
    }
  ],
  "name": "ember-modal",
  "optionalDependencies": {},
  "readme": "# ember-modal\n\n[WAI-ARIA][wai-aria] accessible modal dialog component for [Ember.js][ember].\n\nThis is essentially a complete copy/paste job of [ic-modal][ic-modal] but in the form of an ember-cli addon.\n\n## Installation\n\n```bash\n# From within your ember-cli project\nember install:addon ember-modal\n```\n\n## Usage\n\n### Basic Modal\n\nIn its simplest form:\n\n```html\n{{#modal-trigger controls=\"ohai\"}}\n  open the modal\n{{/modal-trigger}}\n\n{{#modal-container id=\"ohai\"}}\n  Ohai!\n{{/modal-container}}\n```\n\nHere are all the bells and whistles:\n\n```html\n<!--\n  Triggers can live anywhere in your template, just give them the id of\n  the modal they control, you can even have multiple triggers for the\n  same modal.\n-->\n\n{{#modal-trigger controls=\"tacos\"}}\n  abrir los tacos\n{{/modal-trigger}}\n\n<!--\n  The \"close-when\" attribute can be bound to a controller property. If\n  `tacosOrdered` gets set to `true` then the modal will close.\n\n  \"open-when\" is the same, but opposite.\n-->\n\n{{#modal-container id=\"tacos\" close-when=tacosOrdered}}\n\n  <!--\n    This is optional, but you really should provide your own title,\n    it gets used in the UI and is important for screenreaders to tell the\n    user what modal they are in. If you hate it, write some CSS to hide\n    it.\n  -->\n\n  {{#modal-title}}Tacos{{/modal-title}}\n\n  <!--\n    If a trigger lives inside a modal it doesn't need a \"controls\"\n    attribute, it'll just know.\n\n    If you don't provide a trigger inside the modal, you'll get one\n    automatically, but if you're translating, you're going to want your\n    own.\n\n    Put the text to be read to screenreaders in an \"aria-label\" attribute\n  -->\n\n  {{#modal-trigger aria-label=\"Cerrar los tacos\"}}×{{/modal-trigger}}\n\n  <!-- Finally, just provide some content -->\n\n  <p>\n    ¡Los tacos!\n  </p>\n{{/modal-container}}\n```\n\n### Form Modal\n\nOne of the most common use-cases for a modal dialog is a form.\n\n```html\n<!-- we still use modal-trigger -->\n{{#modal-trigger controls=\"new-user-form\"}}\n  open\n{{/modal-trigger}}\n\n<!-- note this is modal-form -->\n{{#modal-form\n  id=\"new-user-form\"\n\n  <!--\n    map the component's \"on-submit\" to controller's \"submitForm\",\n    the component handles the submit for you\n   -->\n  on-submit=\"submitForm\"\n\n  <!--\n    if the form is closed w/o being submit, maybe you need to restore\n    the old properties of a model, etc.\n  -->\n  on-cancel=\"restoreModel\"\n\n  <!-- same thing as above -->\n  on-invalid-close=\"handleCloseWhileSaving\"\n\n  <!--\n    bind component's \"awaiting-return-value\" to local \"saving\",\n    more on this in the js section\n  -->\n  awaiting-return-value=saving\n\n}}\n\n  <!-- in here you are already a form, just add your form elements -->\n\n  <fieldset>\n    <label for=\"name\">Name</label>\n    {{input id=\"name\" value=newUser.name}}\n  </fieldset>\n\n  <!-- and put your buttons in the footer -->\n\n  <fieldset>\n    <!-- when \"awaiting-return-value\" is true, \"saving\" will be also -->\n    {{#if saving}}\n      saving ...\n    {{else}}\n      {{#modal-trigger}}Cancel{{/modal-trigger}}\n      <button type=\"submit\">Save</button>\n    {{/if}}\n  </fieldset>\n\n{{/modal-form}}\n```\n\n```js\nApp.ApplicationController = Ember.Controller.extend({\n\n  newUser: {},\n\n  actions: {\n\n    // this will be called when the user submits the form because we\n    // mapped it to the \"on-submit\" actions of the component\n    submitForm: function(modal, event) {\n\n      // If you set the event.returnValue to a promise, modal-form\n      // will set its 'awaiting-return-value' to true, that's why our\n      // `{{#if saving}}` in the template works. You also get an\n      // attribute on the component to style it differently, see the css\n      // section about that. You don't need to set the `event.returnValue`.\n      event.returnValue = ic.ajax.request(newUserUrl).then(function(json) {\n        addUser(json);\n        this.set('newUser', {});\n      }.bind(this));\n    },\n\n    // if the user tries to close the component while the\n    // `event.returnValue` is stil resolving, this event is sent.\n    handleCloseWhileSaving: function(modal) {\n      alert(\"Hold your horses, we're still saving stuff\");\n    },\n\n    restoreModel: function(modal) {\n      this.get('model').setProperties(this.get('modelPropsBeforeEdit'));\n    }\n  }\n});\n```\n\n```css\n// while the promise is resolving, you can style the elements\n#new-user-form[awaiting-return-value] modal-main {\n  opacity: 0.5;\n}\n```\n\n### Overriding Styles\n\nThis component ships with some CSS to be usable out-of-the-box, but the\ndesign has been kept pretty minimal. See `templates/modal-css.hbs` to\nknow what to override for your own design.\n\n### Animations\n\nThere is a class \"hook\" provided to create animations when the a modal\nis opened, `after-open`. For example, you could add this CSS to your\nstylesheet to create a fade-in effect:\n\n```css\nmodal-container[is-open] {\n  opacity: 0;\n  transition: opacity 150ms ease;\n}\n\nmodal-container[after-open] {\n  opacity: 1;\n}\n```\n\n  [ember]:http://emberjs.com\n  [ic-modal]:https://github.com/instructure/ic-modal\n  [wai-aria]:http://www.w3.org/TR/wai-aria/roles#dialog",
  "readmeFilename": "README.md",
  "repository": "",
  "scripts": {
    "build": "ember build",
    "start": "ember server",
    "test": "ember test"
  },
  "version": "0.1.0"
}
